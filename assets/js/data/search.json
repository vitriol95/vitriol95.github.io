[ { "title": "스프링 배치 - 10 faultTolerant", "url": "/posts/batchbase10/", "categories": "Spring, batch", "tags": "spring, springboot, batch", "date": "2021-11-07 13:00:00 +0900", "snippet": "FaultTolerant큰 의미로 이번 기능또한 마찬가지로 배치 반복 및 오류제어 카테고리에 들어간다. 해당 옵션또한 여러 청크지향 프로세스에 자주등장하며, 장애 처리에 대해 복원력을 향상시킬 수 있는 방법이다. 단어 그대로, fault에 대해 tolerant하게 버틴다는것이다.즉, 해당 기능을 이용하면 오류가 발생해도 Step이 즉시 종료되지 않고 Retry나 Skip기능을 활성화 함으로서 내결함성의 서비스가 가능하도록 한다.기본 개념@Beanpublic Step step(){ return stepBuilderFact..." }, { "title": "스프링 배치 - 9 배치 반복 및 오류제어 두번째", "url": "/posts/batchbase9/", "categories": "Spring, batch", "tags": "spring, springboot, batch", "date": "2021-11-07 13:00:00 +0900", "snippet": "첫번째에선배치 반복 및 오류제어 글을 쓰다보니 너무 길어져 한번 짜르고 이어가도록 하겠다. 앞선 포스트에서는 배치 반복 및 오류제어와 관련된 이야기를 이해하기 위해 큰 흐름을 뒤짚어 보았을 뿐이다.요약하자면 청크기반이 아닌 스텝은 RepeatOperation인 stepOperation을 가지고있고, 청크기반인 스텝은 RepeatOperation stepOperation을 똑같이 가지지만 청크 단위의 chunkOperation도 가지고있다는 것이다. 그리고 CompletionPolicy의 존재또한 확인했다.스텝에서의 반복청크기..." }, { "title": "스프링 배치 - 8 배치 반복 및 오류제어 첫번째", "url": "/posts/batchbase8/", "categories": "Spring, batch", "tags": "spring, springboot, batch", "date": "2021-11-07 13:00:00 +0900", "snippet": "Repeat스프링 배치는 얼마나 작업을 반복해야 하는지 알려줄 수 있는 기능을 제공한다. 특정 조건이 충족되거나, 아닐경우에 Job, Step을 반복하도록 구성할 수 있다는 것이다. Step과 Chunk의 반복을 RepeatOperation을 통해서 처리하고 있기에 가능한 것이다.이의 기본 구현체는 RepeatTemplate에 해당한다.반복을 결정하는 요소들RepeatStatus보통 스프링 배치의 처리가 완료되었는지, 아닌지를 판별하기 위해 RepeatStatus라는 이넘클래스를 사용한다. 우리도 자주 사용했었다! 아래와 같..." }, { "title": "스프링 배치 - 7 ItemWriter", "url": "/posts/batchbase7/", "categories": "Spring, batch", "tags": "spring, springboot, batch", "date": "2021-11-07 12:00:00 +0900", "snippet": "ItemWriter지난시간에 포스팅했던 ItemReader와 더불어 청크 지향 프로세스에 필수적인 ItemWriter에 대해 이야기할 예정이다.기본 개념청크 지향 프로세스의 최종단계로, processor 혹은 reader로 부터 받은 자료들을 Chunk단위로 받아 일괄 출력 작업을 위한 인터페이스에 속한다. ItemReader와 동일한 자료형들을 모두 지원한다.가지고있는 메서드는 다음 하나뿐이다. 따라서 람다식을 활용해 넘겨줄 수 있다. void write(List&amp;lt;? extends T&amp;gt; items)당..." }, { "title": "스프링 배치 - 6 ItemReader", "url": "/posts/batchbase6/", "categories": "Spring, batch", "tags": "spring, springboot, batch", "date": "2021-11-06 12:00:00 +0900", "snippet": "ItemReader이전시간에 청크 지향방식 태스크에 대해 이야기를 해보았는데, 총 3가지 과정으로 나누어지는 것을 확인했다. 이번엔 이중 Reader에 대해 좀 더 들어가보자.기본 개념다양한 입력으로부터 데이터를 읽어 제공하는 인터페이스에 해당한다. 지원하는 종류는 다음과 같다. FlatFile (csv,txt) XML, JSON DataBase JMS, RabbitMQ 같은 MQ Custom Reader일종의 큰 맥락을 보면 아래 그림과 같이 정리된다.굉장히 방대하고 양도 많다.. 여기서 ItemReader&amp;..." }, { "title": "스프링 배치 - 5 청크 지향 처리", "url": "/posts/batchbase5/", "categories": "Spring, batch", "tags": "spring, springboot, batch", "date": "2021-11-05 12:00:00 +0900", "snippet": "Chunk Oriented Task가장 먼저, chunk에 대해 이야기 해볼 필요가 있다. 스프링 배치에서의 청크는 각 커밋 사이에 처리되는 row의 개수를 의미한다. 즉, 한번에 하나씩 데이터를 읽어서 chunk라는 덩어리를 만든뒤, chunk 단위로 트랜잭션을 다루는 것을 의미한다. Chunk 단위로 커밋이 되며, 실패시 롤백이 이루어진다.해당 Task보다 큰 단위인 여러 Job과 Step를 살펴보기 전에, 가장 많이쓸 Chunk 지향처리부터 알아보려한다.기본 개념크게 read / process / write 과정으로 나..." }, { "title": "스프링 배치 - 4 도메인 뜯어보기(STEP)", "url": "/posts/batchbase4/", "categories": "Spring, batch", "tags": "spring, springboot, batch", "date": "2021-11-04 12:00:00 +0900", "snippet": "STEP사실상 Job은 일종의 껍데기에 불과하다. Step의 경우 BatchJob을 구성하는 하나의 단계로, 실제 배치내용을 정의하고 컨트롤하는데에 모든 정보를 가지고 있다. 이외에도입출력과 관련된 특화된 작업또한 진행할 수 있다.대표적인 구현체들로는 다음이 존재한다. TaskletStep Chunk-Oriented-Step도 이의 일환이다. PartitionStep JobStep FlowStepSTEP EXECUTIONStep의 경우, Instance를 담는 테이블이 없다. 대신, Execu..." }, { "title": "스프링 배치 - 3 도메인 뜯어보기(JOB)", "url": "/posts/batchbase3/", "categories": "Spring, batch", "tags": "spring, springboot, batch", "date": "2021-11-03 12:00:00 +0900", "snippet": "JOB먼저, 배치에서 가장 큰 단위인 JOB을 보도록 하자!큰 흐름은 위와 같이 그림으로 정리된다. JOB은 이름을 가지며 재시작이 가능하고(restartable) JobRepository가 지정되어있다. 앞선 테이블 스키마에서 살펴본 INSTANCE,EXECUTION에 대한 정보를 쌓아야하므로 이벤트 리스너를 지정할 수 있고, (Job 전 / 후) JobParameter를 검증 및 증가를 시켜줄 수 있다. 마지막으로 Step에 대한 핸들러 지정도 가능하다!정리해 보자면 Job은 execu..." }, { "title": "스프링 배치 - 2 DB 스키마에 대한 이해", "url": "/posts/batchbase2/", "categories": "Spring, batch", "tags": "spring, springboot, batch", "date": "2021-11-02 12:00:00 +0900", "snippet": "난 테이블을 생성한적 없는데..이러한 테이블들은 모두 스프링 배치의 실행 + 관리에 대한 정보를 삼기 위해 만들어진다. 예를 들어 잡이 실패했는지 성공했는지에 대한 여부부터, Context에 대한 세세한 정보까지 제공해 주게 된다.DB 스키마에 대하여설정spring.batch.jdbc.initialize-schema설정을 통해 끄고 켤 수 있다. 기본설정은 EMBEDDED이고 h2와 같은 내장 DB일때만 자동생성된다. 당연히 운영에서 수동(NEVER)로 설정하고 스크립트를 생성해서 쓰는것이 낫다.수동 설정당연히, DataSo..." }, { "title": "스프링 배치 - 1 스프링 배치란?", "url": "/posts/batchbase1/", "categories": "Spring, batch", "tags": "spring, springboot, batch", "date": "2021-11-01 12:00:00 +0900", "snippet": "스프링 배치깊은 부분까지 파고들어가 볼 생각이다. 배치에 대한 기초적인 아이디어의 경우(왜 필요한지, 어떻게 활용 되는지에 대한) 창천향로님의 블로그 기억보단 기록을 를 참고하면 큰 도움이 된다!해당 글 시리즈는 Inflearn에 있는 Spring Batch 강의 - 정수원님를 들으며 강의 내용들을 정리한 것에 해당한다. 강추하는 강의이다..@EnableBatchProcessing스프링 배치가 작동하기 위해 선언해야 하는 어노테이션에 해당한다. Spring Eureka나 JPA (Not Spring Data JPA)등을 사용..." }, { "title": "스프링 + 코틀린 다국어 메시지 관리 시스템 구축(8) - 실제 배포 진행", "url": "/posts/multilang8/", "categories": "Spring, spring_project", "tags": "spring, spring mvc, springboot, springframework, kotlin, aws, ec2", "date": "2021-10-09 14:00:00 +0900", "snippet": "" }, { "title": "스프링 + 코틀린 다국어 메시지 관리 시스템 구축(7) - EC2 설정", "url": "/posts/multilang7/", "categories": "Spring, spring_project", "tags": "spring, spring mvc, springboot, springframework, kotlin, aws, ec2", "date": "2021-10-09 13:00:00 +0900", "snippet": "배포 준비aws의 ec2 인스턴스 2개를 이용할 생각이다. (젠킨스 서버, 실제 서버) 배포 흐름은 다음과 같다.젠킨스 서버 설정Putty로 접속 이후, jenkins 및 docker에 대한 설치가 필요하다. 서버 두대 모두 Amazon linux 2를 이용하였다.Jenkins 설치 및 실행sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.reposudo rpm --import https://pkg.jenkins.io/..." }, { "title": "스프링 + 코틀린 다국어 메시지 관리 시스템 구축(6)", "url": "/posts/multilang6/", "categories": "Spring, spring_project", "tags": "spring, spring mvc, springboot, springframework, kotlin", "date": "2021-10-09 11:00:00 +0900", "snippet": "프론트 페이지어드민 페이지Vue 라는 프레임워크를 이용해 프론트 페이지를 만드려 한다. 완성본을 보여주자면 다음과 같은 페이지이다. 아래부분이 좀 짤려있는데, Page-nav 컴포넌트가 존재한다.이를 컴포넌트 단위로 나누어 보면 다음과 같다.모달의 경우 위에 보이는 ‘메시지 등록’ 버튼을 누르면 나오는 모달창에 해당하며 컴포넌트 각각의 이벤트들과 init data들은 따로 언급하지 않겠다.로그인 관리위의 컴포넌트가 Main.vue에 해당하는데 이보다 상위 뷰인 Admin.vue에서 이를 관리하도록 하였다.import {cre..." }, { "title": "스프링 + 코틀린 다국어 메시지 관리 시스템 구축(5)", "url": "/posts/multilang5/", "categories": "Spring, spring_project", "tags": "spring, spring mvc, springboot, springframework, kotlin", "date": "2021-10-09 11:00:00 +0900", "snippet": "사용자 인증로그인 기능프론트단에 페이지를 만들어야 하는데, 우리는 총 2가지 기능을 제공할 것이다. 회원가입 기능은 제공하지 않으려한다. 내장된 어드민 계정만 가능하다. 어드민 페이지 샘플 페이지 (언어셋에 따라 바뀌는 컨텐츠)여기서 1번의 경우 로그인을 진행하여 실제 어드민 계정에 대한 인증을 진행해야 한다.이 기능을 구현하기 위해서 다음과 같은 질문을 해보았다.스프링 시큐리티를 이용해야 하는가? 결과적으로 나는 ‘이용하지 않는다’로 결정했다 이유는 기능 구현을 쉽게 해주지만, 필요이상으로 무겁다. 시큐리티 필터방식..." }, { "title": "스프링 + 코틀린 다국어 메시지 관리 시스템 구축(4)", "url": "/posts/multilang4/", "categories": "Spring, spring_project", "tags": "spring, spring mvc, springboot, springframework, kotlin", "date": "2021-10-08 11:00:00 +0900", "snippet": "Ex-apiProperties 다운로드 기능앞선 ADMIN 기능에서 구현한 읽어오기 기능을 확장하여 구현하려고 한다. 실제 queryDsl 리포지토리를 살펴보면 다음과 같다.class MessageDslRepositoryImpl(private val queryFactory: JPAQueryFactory): MessageDslRepository{ companion object{ val qMessage: QMessage = QMessage.message val qContent: QMessageCont..." }, { "title": "스프링 + 코틀린 다국어 메시지 관리 시스템 구축(3)", "url": "/posts/multilang3/", "categories": "Spring, spring_project", "tags": "spring, spring mvc, springboot, springframework, kotlin", "date": "2021-10-07 11:00:00 +0900", "snippet": "Admin CRUDQueryDSL 적용하기그래들 6버전(맞나..?)이후, annotationProcessor를 이용해 QClass를 생성하게끔 장려하고 있다. 이는 코틀린도 마찬가지이다. 하지만, Kotlin은 Kapt(Kotlin Annotation Processing Tool)을 이용한다.Annotation Processor란 어노테이션에 대한 코드베이스를 검사하거나 새로운코드를 생성하는데 사용된다. 이 프로세서는 자바 컴파일러 플러그인의 일종으로개발자의 코드를 단순화 또는 자동화 하는데 사용할 수 있다. 코틀린을 컴파일..." }, { "title": "스프링 + 코틀린 다국어 메시지 관리 시스템 구축(2)", "url": "/posts/multilang2/", "categories": "Spring, spring_project", "tags": "spring, spring mvc, springboot, springframework, kotlin", "date": "2021-10-06 11:00:00 +0900", "snippet": "도메인 설계가장 큰 주안점이 ‘새로운 로케일이 추가 될 수 있다’ 이므로 이에 대해 관계형으로 도메인을 설계했다.도메인 - 메시지메시지에서 컨텐츠로, 컨텐츠에서 메시지로 모두 조회를 할 수 있다고 판단하여 mappedBy 어노테이션을 이용해 양방향 매핑을 해주었다.메시지 클래스는 다음과 같다.@Entity@DynamicUpdateclass Message : BaseEntity() { @Id @Column(name = &quot;message_id&quot;) @GeneratedValue(strategy = Ge..." }, { "title": "스프링 + 코틀린 다국어 메시지 관리 시스템 구축(1)", "url": "/posts/multilang1/", "categories": "Spring, spring_project", "tags": "spring, spring mvc, springboot, springframework, kotlin", "date": "2021-10-06 11:00:00 +0900", "snippet": "프로젝트 목표공부하고 있던 코틀린과 스프링부트의 조합으로 다국어 메시지를 관리하는 시스템을 만들어 보려한다.프로젝트에 대한 링크는 여기를 참고하면 된다.!개요구현해야할 사항은 아래와 같다.jdk 11, 빌드 툴 gradle사용1. 어드민 API- 검색어와 카테고리로 메시지 조회하는 기능- 카테고리별로 각각의 메시지 키에 해당하는 N개국어(현재는 한/영)를 등록, 수정, 삭제 기능2. 외부 제공용 API- 메시지 리스트를 카테고리로 조회하는 기능- 메시지 리스트를 properties 파일로 제공하는 기능3. 프론트- 메시지 CR..." }, { "title": "코틀린의 reified 키워드", "url": "/posts/reified/", "categories": "Kotlin, kotlin_study", "tags": "kotlin, jvm, java", "date": "2021-10-05 14:00:00 +0900", "snippet": "reified키워드는 왜쓸까?출처fun &amp;lt;T&amp;gt; genericFunc(c: Class&amp;lt;T&amp;gt;) 와 같이 일반적인 제네릭 함수 body에서 타입 T는 컴파일 타임에는 존재하지만, 런타임 시에는 Type erasure때문에 접근할 수 없게된다. 따라서 일반적인 클래스에 작성된 함수 body에서 제네릭 타입에 접근하고 싶다면 genericFunc 처럼 명시적으로 타입을 파라미터로 전달해주어야한다.하지만, reified type parameter와 함께 inline을 만들면 추가적으로 c..." }, { "title": "코틀린의 extension, inline 함수", "url": "/posts/extensionFunc/", "categories": "Kotlin, kotlin_study", "tags": "kotlin, jvm, java", "date": "2021-10-04 14:00:00 +0900", "snippet": "Extension Function코틀린 내에 어떤 클래스의 메서드를 정의하는 데에는 두가지 방법이 있다. 하나는 확장함수, 다른 하나는 멤버 변수로써의 함수에 해당한다.class Foo { ... }fun Foo.bar() { // Some stuff}class Foo { ... fun bar() { // Some stuff }}그렇다면 이러한 extension function은 어떨때 쓰이는건지 궁금했다.존재하는 API의 확장이나, 추가를 하고싶을 때 사용하면 좋다.이는 클래스에 새로운 기능..." }, { "title": "DB의 트랜잭션 (4) 트랜잭션의 격리성, LOCK 세번째", "url": "/posts/mysql4/", "categories": "DataBase, sql", "tags": "sql, lock, mysql, database, transaction", "date": "2021-10-04 14:00:00 +0900", "snippet": "비관적 락과 낙관적 락비관적 락 (Pessimistic)이전까지 우리가 보았던 락(Lock)의 종류는 모두 비관적락에 해당한다. 이는 Repeatable Read 또는 Serializable 정도의 격리성 수준에서 가능하다. 즉, 트랜잭션이 시작될 때 Shared Lock 혹은 Exclusive Lock을 걸어놓고 시작하는 방법에 해당한다. 결국 DB내의 Transaction을 이용하여 충돌을 예방하는 것이 바로 비관적락에 해당한다. 앞서 배운 방법(격리 수준을 설정하기 및 락을 걸기)이 모두 여기에 속한다.낙관적 락 (Op..." }, { "title": "코틀린의 CompanionObject vs 자바 Static", "url": "/posts/kotlinCompanionObject/", "categories": "Kotlin, kotlin_study", "tags": "kotlin, jvm, companionObject, static, java", "date": "2021-10-04 13:00:00 +0900", "snippet": "Kotlin + Companion Object출처 출처2코틀린에서의 Companion Object는 자바의 Static과 엄연히 다르다. 그렇다면 왜 기존의 Static을 쓰지 않고 코틀린에와서 이렇게 넘어오게 됬는지, 그 연유를 찾아 올라가면 알 수 있지 않을까?자바의 Static &amp;amp; 코틀린의 Object자바에서의 static이 붙은 변수나 메서드를 각각 클래스 변수, 클래스 메서드라고 부르고 있다. static이 붙은 멤버는 클래스가 메모리에 적재될 때 자동으로 함께 생성되므로 인스턴스 생성 없이 접근이 가능..." }, { "title": "도커의 Cmd vs EntryPoint", "url": "/posts/dockerFilecmd/", "categories": "DevOps, docker", "tags": "docker, linux, dockerfile", "date": "2021-10-04 13:00:00 +0900", "snippet": "DockerFileDockerfile을 쓰며 가장 헷갈렸던 점은 CMD와 ENTRYPOINT의 차이에 해당했다. 이 차이점을 느껴보자.CMD vs ENTRYPOINT둘다 docker container가 실행될때 실행되어야 할 커맨드들을 지정할 수 있다.먼저 요약해보자면, ENTRYPOINT는 컨테이너가 시작될때 항상 실행될 명령어를 의미한다. CMD는 이 ENTRYPOINT에 넣을 arguments와 같은 역할을 해줄 수 있다.예를 들어보자면ENTRYPOINT [&quot;/path/dedicated_command&quot;]..." }, { "title": "도커의 Host - Client 구조", "url": "/posts/dockerCliend/", "categories": "DevOps, docker", "tags": "docker, linux, network", "date": "2021-10-04 12:00:00 +0900", "snippet": "Docker 원격 이용Docker는 Sserver-Client 구조의 어플리케이션이라고 하지만, 이를 의식하며 써본적은 드물다. 이번엔 Server-Client가 떨어져있어도 REST API를 이용해 원격으로 이용 을 직접 해보며 익혀보자.사실, 기존에 사용했던 docker ps와 같은 명령어도 결국은 docker서버에 GET /~~/container 으로 Http요청을 보낸 것과 동일한 방식으로 작동한다. 하지만 나는 대부분 docker server(daemon)과 client가 같은 머신내에 존재하고 있어 이를 느끼지 못했..." }, { "title": "DB의 트랜잭션 (3) 트랜잭션의 격리성, LOCK 두번째", "url": "/posts/mysql3/", "categories": "DataBase, sql", "tags": "sql, lock, mysql, database, transaction", "date": "2021-10-03 14:00:00 +0900", "snippet": "이전시간이전시간에 대한 이야기는 시나리오 2번의 상황에 해당했다. 트랜잭션 A,B 모두 읽기만 진행할 때 트랜잭션 A,B 모두 쓰기를 진행할 때 트랜잭션 A는 읽기만 진행, B는 쓰기를 진행파생한 문제점에서 갱신 손실문제 를 Lock의 개념으로 해결해 보았다.트랜잭션 격리 수준이제 시나리오 3으로 들어와보자. 2에서 처럼 갱신 손실문제 처럼 심각한 문제는 발생하지 않지만트랜잭션 격리성으로 나타날 수 있는 문제점 들이 발생한다. 그리고 이들은 아래와 같은 하위 문제들로 나뉜다. 오손 읽기(dirty read) 반복 불가..." }, { "title": "그래들 태스크 정리", "url": "/posts/gradleTask/", "categories": "DevOps, gradle", "tags": "kotlin, jvm, gradle, kotlindsl", "date": "2021-10-03 12:00:00 +0900", "snippet": "Gradle Task정리이전까지 Gradle(wrapper)를 쓰면서, 한정적인 명령어를 감을 의존해 사용했었던 것 같다. 이번 기회에 gradle task의 주요 기능 및 build과정시 진행되는 것들을 살펴보려 한다.build vs bootJar둘 다 많이 쓰고, 봐왔던 태스크에 해당한다. 이둘의 정확한 차이점을 이야기 해보는 것이 목표이다. ./gradlew build –dry-run (Asciidoctor 이라는 명령어가 있는데, 이는 프로젝트에서 사용하기 위해 따로 정의한 task다. test에 의존..." }, { "title": "elk의 기본구조와 사용법", "url": "/posts/elk/", "categories": "DevOps, elk", "tags": "elasticsearch, kibana, logstash, log", "date": "2021-10-03 12:00:00 +0900", "snippet": "ELK위 그림과 같이 분석 및 저장 기능을 담당하는 Elastic Search + 수집 기능을 하는 Logstash + 시각화 도구인 Kibana의 조합을 일컫는다. Elastic Search Lucene 기반의 분산 검색엔진에 해당한다. Logstash를 통해 수신된 데이터를 저장하는 역할을 담다안다. (비)정형, 메트릭 등 원하는 방법으로 다양한 유형의 검색을 수행하고 결합할 수 있다 REST API를 사용해 CRUD요청을 보낼 수 있다. (RDB와 문법차이가 존재한다) Lo..." }, { "title": "도커의 레이어저장, 네트워크", "url": "/posts/docker/", "categories": "DevOps, docker", "tags": "docker, layer, linux, network", "date": "2021-10-03 12:00:00 +0900", "snippet": "DOCKER도커의 레이어 저장방식도커 이미지는 컨테이너 실행을 위한 정보들을 가지고 있기에, 용량이 수백메가에 이른다. 만약 기존 이미지에 파일 하나를 추가했다고 이를 다시 다운로드 한다면, 매우 비 효율적이라 볼 수 있다. 도커는 이런 문제를 해결하기 위해서 layer라는 개념을 사용하고, 유니온 파일 시스템(UFS)을 이용해 여러개의 레이어를 하나의 파일시스템으로 사용하게 해준다.출처위 그림이 적절한 예시가 된다. webapp이미지를 nginx 이미지 기반으로 만들었다면 A+B+C+nginx+source 레이어로 구성된다...." }, { "title": "DB의 트랜잭션 (2) 트랜잭션의 격리성, LOCK", "url": "/posts/mysql2/", "categories": "DataBase, sql", "tags": "sql, lock, mysql, database, transaction", "date": "2021-10-02 14:00:00 +0900", "snippet": "트랜잭션의 격리성(고립성)ACID 중 I인 고립성DB의 경우 공유목적이 있기에, 여러 트랜잭션이 동시에 수행 될 수 있다. DB입장에서는각각의 트랜잭션이 다른 트랜잭션의 방해를 받지 않고 독립적으로 작업을 수행해야 하는 것이다.이렇게 여러 트랜잭션이 동시 수행될때 간섭이나 충돌이 일어나지 않도록 하는 것을 고립성 이라고 이야기한다.동시성 제어임의의 시간 t에서 트랜잭션 A, B가 동시에 실행되고 있으며 테이블 T를 다루고 있다. 이때 같은 데이터를동시에 읽고, 쓰는 작업을 진행할 경우 데이터의 일관성이 훼손될 수 있다. 이때 ..." }, { "title": "코틀린 지네릭스 - 2", "url": "/posts/kotlinGenerics2/", "categories": "Kotlin, kotlin_study", "tags": "kotlin, jvm, generics", "date": "2021-10-02 13:00:00 +0900", "snippet": "In Out지난 내용을 요약하면 in / out으로 지네릭에 flexibility를 주는 것을 보았다. projected된 지네릭 파라미터를 읽고싶을 때에는 out을 사용하고, 이를 내부에서 사용하고 싶을때에는 in이라는 키워드를 사용하면 된다.하지만 이런 궁금증도 든다, 이 둘을 동시에 사용하는 방법이 있을까??가장 먼저 생각할 수 있는 방법으로는 projected parameter를 Read, Write를 할 수 있는 각각의 out, in 키워드가 붙은 지네릭 클래스를 만들고 이둘을 상속하는 것이 있다.하지만 좀 더 일반적..." }, { "title": "코틀린 지네릭스 - 1", "url": "/posts/kotlinGenerics1/", "categories": "Kotlin, kotlin_study", "tags": "kotlin, jvm, generics", "date": "2021-10-02 12:00:00 +0900", "snippet": "Variant in Java가장 먼저 다음의 상황을 가정해 보자. 1 - Animal이라는 클래스를 상속한 Dog이라는 클래스가 존재한다. 2 - Group 라는 지네릭 인터페이스가 존재하며, 다음과 같은 추상 메서드가 존재한다 void insert(T item) T fetch() 이를 사용함에 있어 다음과 같은 문제를 맞닥뜨렸을 것이다. 3 - 하지만 Group&amp;lt;Dog&amp;gt;은 Group&amp;lt;Animal&amp;gt;의 하위 클래스가 아니다.2번에 대한 문제..." }, { "title": "코틀린 var, val 그리고 inline", "url": "/posts/kotlinStudy1/", "categories": "Kotlin, kotlin_study", "tags": "kotlin, jvm, var, val", "date": "2021-10-02 11:00:00 +0900", "snippet": "인터페이스 상에서의 var과 val의 차이코틀린에서 ‘var속성과 val속성을 사용한다.’ 라는 것은 결국 ‘속성 처럼’ 보이는 문법을 쓰게 해주는 getter나 setter를 만들어주는 것이다. 또한 이러한 특징은 추상 클래스나 인터페이스에서 추상 수준의 var이나 val을 사용할 수 있게 해준다.그렇다면 다음과 같은 선언을 보자. 이번 프로젝트에서 프로젝션을 사용할 때 자주 썼던 선언방식에 해당한다.interface Test{ val a:Int var b:String}이는 자바로 compile해보면 다음과 같다. val..." }, { "title": "DB의 트랜잭션 (1) 트랜잭션의 성질", "url": "/posts/mysql1/", "categories": "DataBase, sql", "tags": "sql, lock, mysql, database, transaction", "date": "2021-10-01 14:00:00 +0900", "snippet": "TransactionTransaction은 무엇인지?DBMS에서 데이터를 다루는 논리적인 작업의 단위 에 해당한다. DBMS에서 이렇게 transaction 이라는 작업의 단위를정의해 둔 이유가 무엇일까? DBMS를 이용해 데이터를 다룰 때 장애가 일어나는 경우가 있는데, 장애 발생시 데이터를 복구하는 작업의 단위가 된다. DB에서 여러 작업이 동시에 같은 데이터를 다룰 때가 있다. 트랜잭션은 이 작업을 서로 분리하는 단위가 된다. 이 항목이 뒤에 이야기 할 ‘격리성’과 연결된다. 트랜잭션과 격리성은 떼어놓..." }, { "title": "JWT, CSRF, CORS", "url": "/posts/jwt/", "categories": "CS", "tags": "jwt, security, csrf, cors, session, token", "date": "2021-10-01 13:00:00 +0900", "snippet": "JWT기존 스프링 시큐리티를 이용했을때는, 세션방식의 로그인 &amp;amp; 인증만을 진행해 봤지만, 이번 프로젝트에서는 JWT토큰을 이용해 프론트 로그인 및 인증을 진행해보려한다.왜 쓰는가?HTTP프로토콜을 사용하면서, REST API가 있고 권한이 있는 사용자에게만 엑세스를 준다고 생각해보자. 가장 단순하게 접근해 보자면 API가 사용자 이름과 비밀번호를 요청하는 것이다. 그리고 이를 DB를 통해 확인을 하고, 권한이 있는지 확인을 할 것이다. 하지만 HTTP 프로토콜은 stateless하게 동작한다. ..." }, { "title": "Git Flow", "url": "/posts/gitflow/", "categories": "Git", "tags": "git, gitflow", "date": "2021-10-01 12:00:00 +0900", "snippet": "Git Flow (console)컨셉 참고글feature 새 기능(feature) 시작하기 git flow feature start ${feature-name} develop에 기반한 새 기능(feature)브랜치 생성 후 전환 (checkout) 기능 완료 시 git flow feature finish ${feature-name} feature-name에 해당하는 브랜치를 develop으로 merge후, feature-name에 해당하는 브랜치를 삭제 ..." }, { "title": "엔진엑스 + Configuration", "url": "/posts/nginxConfiguration/", "categories": "DevOps, nginx", "tags": "nginx, webServer, configuration, proxy", "date": "2021-10-01 12:00:00 +0900", "snippet": "NginxNginx로 할 수 있는 것들 WS(web-server)의 역할 정적인 파일을 처리하는 HTTP서버로서의 역할을 할 수 있다. 이번 프로젝트에서는 이 역할이 주다. (Spring Boot - tomcat을 통한 WAS이전의 WS를 두는 용도) 또한 Nginx는 비동기 처리 방식 (event-driven)을 채택해 사용중이다. 리버스 프록시 클라이언트가 가짜 서버에 요청을 하면, Nginx가 배후 서버로부터 데이터를 가져오는 것이다. 웹 응용프로그..." }, { "title": "git 브랜치, merge 전략", "url": "/posts/gitBranch/", "categories": "Git", "tags": "git, branch, merge", "date": "2021-10-01 11:00:00 +0900", "snippet": "Git Branch + Merge브랜치이름 평소에 브랜치 이름을 이슈이름을 따서 feature/issue-name 지었었는데, 이 방식 보다는 feature/issue-number로 가는 것이 좋다. 깃허브와 자동 연결된다.! 커밋 메시지를 달 때도, issue-number를 맨 앞에 붙혀주는 것이 좋다. 이 역시 자동 연결을 지원한다.PR 종료시 제공하는 3가지 merge 방식 Create a merge Commit 디폴트 값으로 나와있는데, 선택하면 베이스 브랜치에 모든 커밋이 달라 붙게 된다. ..." }, { "title": "TestContainers", "url": "/posts/testContainer/", "categories": "DevOps, test", "tags": "test, testContainers, docker", "date": "2021-10-01 11:00:00 +0900", "snippet": "서론테스트 환경은 프로젝트 설정에서 작지 않은 부분을 차지하고 있고, TDD의 등장으로 그 중요성이 커지고 있는 것이 사실이다. 이번 프로젝트에서는 테스트에 있어 꽤 유명한 툴인 Test Container를 사용해보고, 이에 대한 리뷰 및 의견을 적어보려한다.왜 사용하는가? 테스트 환경을 만드는 과정에서 신경써야할 부분은 여러가지가 있겠지만, 가장 중요한 요소로 ‘멱등성’을 꼽게된다. 이를 간과한 경우에는 다른 테스트 혹은 외부 모듈로 인해 테스트가 간헐적으로 실패할 수 있고, 구간을 찾기가 매우 힘들어진다. ..." }, { "title": "JPA와 낙관적 락", "url": "/posts/optimistic/", "categories": "Spring, jpa", "tags": "spring, springboot, jpa, orm, hibernate, lock, kotlin", "date": "2021-09-30 14:00:00 +0900", "snippet": "JPA의 낙관적 락개념낙관적 락에 대한 설명은 이글에 정리를 해 두었다.!동시성제어를 위해 JPA에서는 낙관적 락을 지원하게 된다. 앞선 글에서와 마찬가지로 version 칼럼을 추가하여 Entity의 변경을 추적하는 메커니즘에 해당한다.적용 -1 VersionJPA에서 낙관적 락을 사용하기 위해서는 @Entity내부에 @Version 어노테이션이 붙은 변수를 구현해 줌으로써 가능하다. 이때 다음과 같은 주의사항이 존재한다. 각 엔티티 클래스에는 @Version속성이 하나만 있어야 한다. 여러 테이블에 매핑된 엔티티의 경우..." }, { "title": "JPA의 @Transactional 어노테이션", "url": "/posts/transactional/", "categories": "Spring, jpa", "tags": "spring, springboot, jpa, orm, hibernate", "date": "2021-09-30 14:00:00 +0900", "snippet": "Transactional애플리케이션 구현을 할때, 서비스나 리포지토리 단에서 @Transactional이라는 어노테이션을 붙히는 경우가 여럿 있었다. 오늘은 이 어노테이션에 대해 파고 들어가보려한다.트랜잭션 격리성에 대한 이야기가 나오므로 이글을 보고오면 좋다!기본 기능Spring에서 JPA를 사용할 때, 빼놓을 수 없는 기능중 하나이다. 실제로 Spring Data Jpa를 사용하게 되었을때, 리포지토리들에게는 (ex. Crud, Jpa) 모두 @Transactional 이 달려있다. 이 어노테이션이 주는 기능은 크게 두가지..." }, { "title": "정렬 알고리즘 2 (quick, merge, heap) with Java", "url": "/posts/sorting2/", "categories": "Algorithm, theory", "tags": "algorithm, theory, java, 정렬", "date": "2021-07-01 22:00:00 +0900", "snippet": "퀵 정렬이론상 가장 빠른 정렬 알고리즘의 하나로 널리 사용되고 있다.원리하나의 피벗(pivot)을 선택하여 이보다 큰 값과 작은 그룹으로 나누어 분할한 뒤, 정렬을 이어나가는 방식이다. merge sort와는 다르게 피벗에 따라 나누어지는 원소 개수가 달라지게 되므로 비균등하게 분할을 진행하게 된다.A = [5,7,1,4,6,2,3,9,8]을 예시로 들어 퀵 정렬을 진행해 보자. 피벗을 빨간색으로 표시하고, 리스트의 양끝을 파란색으로 표시해 두겠다. 5 7 1 4 6 2 3 9 8 그룹을 나누려면 피벗 이하의 요소를 배열의 ..." }, { "title": "백준 5670 휴대폰 자판 with Python, Java", "url": "/posts/boj5670/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, 문자열, kmp, 구현, python3, 백준, java", "date": "2021-06-10 15:00:00 +0900", "snippet": "문제소개문제출처 : 백준 - 휴대폰 자판풀이접근 과정역시 트라이 자료구조를 이용한 문자열 탐색문제에 해당한다. 이전 문제와 굉장히 유사했기에 코드도 이와 비슷한 모습을 띄고 있다. 하지만 처리해야할 상황이 조금 다르다. 문제에서 주어진 예시상황을 보며 이야기해보자. 트라이는 다음과 같이 자료를 저장할 것이다.가장 먼저, ‘단어의 끝’이 달라진다는 점이다. 빨간색 테두리에 해당하는 부분이 각 단어에 끝에 해당한다. 따라서 각각 노드에 방문할 떄 이 여부를 체크해야한다.두번째로, 자동입력기능이다. 루트노드에서는 무조건 1번을 쳐야..." }, { "title": "백준 14725 개미굴 with Python", "url": "/posts/boj14725/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, 문자열, kmp, 구현, python3, 백준", "date": "2021-06-10 15:00:00 +0900", "snippet": "문제소개문제출처 : 백준 - 개미굴풀이접근 과정문제에 대한 접근을 들어가기전, ‘트라이’라는 자료 구조를 이해하고 넘어가야한다. 현재 문제에서 주어진 문자열들의 형태또한 이에 해당하며 이는 문자열을 검색하는데 효율적인 자료구조에 해당한다.이는 일반적인 트리와 다르게 문자열이 키에 해당한다. 그리고 이는 연관된 키를 가지게 된다. 예를 들어 ‘ted’라는 단어가 들어오게 될 시, 트라이 자료구조는 이를 4번의 과정처럼 저장하게 된다. 이 경로는 공통된 접두사를 공유하게 되며 이를 통해 필요한 탐색을 진행할 수 있게 된다. 이 ..." }, { "title": "백준 10266 시계 사진들 with Python", "url": "/posts/boj10266/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, 문자열, kmp, 구현, python3, 백준", "date": "2021-06-10 11:00:00 +0900", "snippet": "문제소개문제출처 : 백준 - 시계 사진들풀이접근 과정개인적으로 어려웠던 문제이다. ‘원형’으로 주어진 정보를 탐색해야 하는데 이에 대한 방법을 생각해내지 못하였다.결론적으로 이야기하자면, 원형으로 나열된 문자열을 체크하기 위해서는 똑같은 문자열을 반복시키는 과정이 필요하다.예를 들어, 359999 0 1 2 와 1 2 3 4 는 똑같은 사진에 해당하는데, 첫번째 문자열을 반복된 배열에 배치하면 다음과 같아진다.idx 0 1 2 3 4 5 ... 359999 360000 360001 360002 360003 ... 719..." }, { "title": "백준 1305 광고 with Python", "url": "/posts/boj1305/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, 문자열, kmp, 구현, python3, 백준", "date": "2021-06-09 12:00:00 +0900", "snippet": "문제소개문제출처 : 백준 - 광고풀이접근 과정문자열 제곱 문제와 유사하다. 하지만 이 문제에서는 문자열의 ‘부분적인 반복’ 또한 체크해주어야 한다.앞선 문제와 유사하게 ‘문자열의 반복’을 체크해야하므로 Kmp 알고리즘의 failure_function이 필요하게 된다. 이를 어떻게 활용해 볼지 예시들을 통해 살펴보자. 슬래쉬(‘/’) 기준 왼쪽이 문자열에 해당하고 오른쪽 배열이 failure_function의 테이블에 해당한다. aaaaa / [0,0,1,2,3,4] abcab / [0,0,0,0,1,2] abababa ..." }, { "title": "스프링 mvc 프로젝트 + AWS EC2에 빌드까지(10)", "url": "/posts/mvcproject10/", "categories": "Spring, spring_project", "tags": "spring, spring mvc, springboot, springframework, java", "date": "2021-06-09 11:00:00 +0900", "snippet": "이전 글이전글 에서는 직접 아마존 EC2에 빌드하는 시간을 가졌다. 이번 시간엔 Travis CI와 Nginx를 이용해 이의 CI / CD를 구축해보자.Travis CIGitHub에서 제공하는 오픈소스 CI 툴에 해당한다. 깃허브에서 빌드할 프로젝트 Repository를 활성화 시킨 뒤, 루트 디렉토리안에(build.gradle과 같은 위치에) travis.yml파일을 생성하여 이에 대한 조건을 달아주어야 한다.# .travis.ymllanguage: javajdk: - openjdk11branches: only: -..." }, { "title": "스프링 mvc 프로젝트 + AWS EC2에 빌드까지(9) 배포시작", "url": "/posts/mvcproject9/", "categories": "Spring, spring_project", "tags": "spring, spring mvc, springboot, springframework, java", "date": "2021-06-09 11:00:00 +0900", "snippet": "이전 글이전글 에서는 최종 코드를 정리해 보았고, 이번시간부터는 직접 AWS EC2에 빌드해보도록 하겠다. AMI는 아마존 Linux 2를 사용하였다.EC2 생성 및 접속Amazon Linux 2 를 인스턴스 AMI로 사용하였고, 필자의 OS는 윈도우 이므로(맥을 꼭 사야겠다..) SSH로 원격 터미널 접속을 도와주는 putty프로그램을 이용해 조작할 예정이다.접속에 성공하였다면, 가장 먼저 리눅스 내부에 자바를 설치해주어야 한다. 프로젝트의 jdk 버전은 11에 해당하므로 이에 맞는 버전을 설치해주어야 한다. 따라서 리눅스 ..." }, { "title": "백준 4354 문자열 제곱 with Python", "url": "/posts/boj4354/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, 문자열, kmp, 구현, python3, 백준", "date": "2021-06-09 11:00:00 +0900", "snippet": "문제소개문제출처 : 백준 - 문자열 제곱풀이접근 과정요약하자면, 어떠한 문자열이 주어질때, 이와 같은 문자열을 만들 수 있는 substring의 최대 제곱수를 뽑아내야한다. 즉, 가장 작은 단위의 substring이 필요하다.가장 먼저 예시들을 통해 확인해보자. abcd : 어떠한 문자열을 제곱하여 만들 수 없으므로 abcd^1에 해당한다. (답 - 1) aaaa : a라는 문자를 4번 곱하여 만들 수 있으므로 a^4에 해당한다. (답 - 4) ababab : ‘ab’문자를 3번 곱하여 만들 수 있으..." }, { "title": "스프링 mvc 프로젝트 + AWS EC2에 빌드까지(8) / 요약 및 최종코드", "url": "/posts/mvcproject8/", "categories": "Spring, spring_project", "tags": "spring, spring mvc, springboot, springframework, java", "date": "2021-06-08 11:00:00 +0900", "snippet": "이전 글이전글 에서 게시글 삭제 쿼리 분석을 하던중, 관계가 잘못되었음 (엄밀히 따지면 불필요)을 깨닫고 이를 수정하려 한다.. Account의 양방향 매핑을 모두 끊고, count또한 세지 않는다. 각각 엔티티들의 최종 코드를 보면 다음과 같다.엔티티들 최종 코드// Account.java@Entity@Table(name = &quot;account&quot;)@AllArgsConstructor@NoArgsConstructor@EqualsAndHashCode(of = &quot;id&quot;, callSuper = fals..." }, { "title": "백준 1786 찾기 with Python", "url": "/posts/boj1786/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, 문자열, kmp, 구현, python3, 백준", "date": "2021-06-08 11:00:00 +0900", "snippet": "문제소개문제출처 : 백준 - 찾기풀이접근 과정kmp알고리즘을 써서 문자열에 대한 탐색을 해보라고 준 문제이다. kmp 알고리즘에 대한 정보와 구현은 여기에 모두 해두었다. 따라서 바로 구현 부분으로 넘어가겠다.구현 (python3)import sysinput = sys.stdin.readlinedef kmp_table(pattern,text): answer, point = 0, [] pt = 1 pp = 0 f_table = [0 for _ in range(pattern_length+1)] # 테이블..." }, { "title": "백준 13460 구슬 탈출 2 with Python", "url": "/posts/boj13460/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, bfs, dfs, 구현, python3, 백준", "date": "2021-06-08 10:00:00 +0900", "snippet": "문제소개문제출처 : 백준 - 구슬 탈출 2풀이접근 과정문제를 읽으며 처음으로 든 생각은 ‘일반적인 길 찾기 문제랑 유사하구나, bfs를 적용해서 최소 비용을 구해야겠다’ 이었다. 하지만, 일반적인 길찾기 문제와 2가지 다른점이 존재한다. 사실 이는 ‘파란색 구슬의 존재’ 1가지로 귀결된다.가장 먼저, 이동을 시켜줄 때 파란구슬도 함께 이동을 시켜주어야 한다는 것이다. 이는 빨간색 공과 함께 기울이는 방향에 따라 같이 움직이게 된다. 코드의 순서로 프로그램이 진행되고 있으므로 이러한 Async한 특성을 구현하기란 쉽지않다.두 ..." }, { "title": "백준 2482 색상환 with Python", "url": "/posts/boj2482/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, dp, python3, 백준, 다이나믹 프로그래밍", "date": "2021-06-07 23:00:00 +0900", "snippet": "문제소개문제출처 : 백준 - 색상환풀이접근 과정원형으로 배열된 상황을 dp로 해결해야하는 문제에 해당한다. ‘dp 테이블을 어떻게 설정할 것인가’를 찾는것은 매우 심플했다. 가장 먼저 ‘몇가지의 색상을 뽑아내야 하는지’ 가 있었고 ‘총 몇개의 색상이 존재하는지’ 가 존재한다.즉 dp[i][j]는 다음을 의미하게 된다. dp[i][j] = 총 색상이 i개 일때, j개를 고르는 경우에수또한 k * 2 &amp;gt; n 인 상황에 대해서는 값을 뽑아낼 수 없다. 다시 말하면 n = 5, k = 3 와같은 경우에서는 고를 수 있는..." }, { "title": "백준 17404 RGB 거리 2 with Python", "url": "/posts/boj17404/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, dp, python3, 백준, 다이나믹 프로그래밍", "date": "2021-06-07 22:00:00 +0900", "snippet": "문제소개문제출처 : 백준 - RGB 거리 2풀이접근 과정기존 RGB거리 문제에서 맨끝 번호에 해당하는 집에 조건이 추가되었다. 즉 집이 원형으로 배열되었다고 하였을 시에, 인접한 곳은 같은색상을 쓰면 안되는 것이다.기존 문제의 해결 방식에 있어 dp는 다음과 같이 채워지게 되었다. dp[i][j] 는 i번째 집의 색상을 j로 칠하였을 때, 갖는 최소 비용이다. 색상은 3개밖에 존재하지 않기에 이는 0, 1, 2에 해당한다.dp[0] = colors[0]for i in range(1,n): dp[i][0] = colors[..." }, { "title": "스프링 mvc 프로젝트 + AWS EC2에 빌드까지(7)", "url": "/posts/mvcproject7/", "categories": "Spring, spring_project", "tags": "spring, spring mvc, springboot, springframework, java", "date": "2021-06-07 11:00:00 +0900", "snippet": "이전 글이전글 에서는 게시글에 대한 검색기능과, 유저 목록을 보여주는 기능을 구현해 보았다. 이번 시간에는 배포이전 마지막단계로 단위테스트와 함께 쿼리 효율을 분석해보고, 필요할 경우 리팩토링을 진행할 예정이다.단위 테스트 구현가장 먼저, 테스트 메서드의 편의성을 위해 Account, Post, Reply를 만들어내는 AccountFactory, PostFactory, ReplyFactory 클래스를 테스트 폴더안에 만들어 두었다.// AccountFactory.java@Component@RequiredArgsConstruct..." }, { "title": "백준 1086 박성원 with Python(pypy3)", "url": "/posts/boj1086/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, dp, 비트 마스크, python3, dfs, 백준, 다이나믹 프로그래밍", "date": "2021-06-06 22:00:00 +0900", "snippet": "문제소개문제출처 : 백준 - 박성원풀이접근 과정개인적으로 어려운 문제였다. 가질 수 있는 순열 후보는 15!에 해당하였기에 완전 탐색은 시간이 굉장히 오래 걸린다. 시간 단축을 위해 메모이제이션을 이용해야 하며 경우의수 또한 비트마스크로 전환하여 구현해야한다.메모이제이션이 필요한 이유는 간단하다. arr = [3,2,1,4,10]이 입력되었다고 가정하였을 때, 순열의 후보는 321410, 321104 등이 존재하는데 앞선 ‘321’과정이 겹치게 된다.가장 먼저 dp 테이블에 어떠한 정보가 들어와야 하는지를 알아야 한다. 첫번째..." }, { "title": "스프링 mvc 프로젝트 + AWS EC2에 빌드까지(6)", "url": "/posts/mvcproject6/", "categories": "Spring, spring_project", "tags": "spring, spring mvc, springboot, springframework, java", "date": "2021-06-06 11:00:00 +0900", "snippet": "이전 글이전글 에서는 Reply객체가 들어옴으로써 발생하는 컨트롤러와 뷰단의 변화를 적용하고 Reply의 등록 및 삭제기능을 구현해 보았다. 이번시간에는 게시글에 대한 검색기능과, 유저 목록을 보여주는 기능을 구현해보자.게시글 검색하기게시글 검색의 경우 메인 nav-bar의 오른쪽에 구현이 되어 있다. 기능은 다음과 같다. 검색창에 키워드를 입력하고 검색하면 본 키워드가 제목에 포함된 게시글만을 보여주게 된다. 이때 카드형식으로 게시글이 노출되며 제목, 간단한 설명(introduction), 작성자, 댓글 수, 등록일이 ..." }, { "title": "백준 15686 치킨 배달 with Python", "url": "/posts/boj15686/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, 구현, python3, 백준, 브루트포스", "date": "2021-06-05 12:00:00 +0900", "snippet": "문제소개문제출처 : 백준 - 치킨 배달풀이접근 과정문제를 읽으며 여러 풀이들을 생각해 보았지만, 가장 쉬운 방법으로는 ‘아 그냥 일일이 다 탐색하게 끔 구현하면 되겠구나’였다. 따라서 코드도 이를 구현한 것에 해당한다.‘치킨 가게’와 ‘집’의 위치를 각각 저장을 해 둔뒤, 입력으로 받은 m에 따른 치킨가게의 조합을 브루트포스를 이용해 만들 수 있다. 선택된 조합마다 각 집에서 치킨 가게의 최소 거리를 입력해 두면 된다.두번째 과정또한 브루트포스에 해당한다. 가게와 집을 일일이 매칭해가며 어떠한 집에서 가게에 따른 최소 거리를 ..." }, { "title": "스프링 mvc 프로젝트 + AWS EC2에 빌드까지(5)", "url": "/posts/mvcproject5/", "categories": "Spring, spring_project", "tags": "spring, spring mvc, springboot, springframework, java", "date": "2021-06-05 11:00:00 +0900", "snippet": "이전 글이전글 에서는 수정사항과 단위테스트, 마지막으로 Reply 엔티티를 정의하고 양방향 매핑까지 완료하였다. 이번시간에는 Reply객체가 들어옴으로써 발생하는 컨트롤러와 뷰단의 변화를 적용하고 Reply의 등록 및 삭제기능을 구현해보자. 등록과정에서는 비동기 테스트를 위해 ajax를 사용해 보겠다.포스트 상세보기 뷰 / 컨트롤러 수정포스트 상세보기 뷰에 Reply객체를 적용해야한다. html파일은 다음과 같이 정의된다.&amp;lt;!-- 수정된 post/view.html 파일 --&amp;gt;&amp;lt;!DOCTYP..." }, { "title": "백준 2042 구간 합 구하기 with Python", "url": "/posts/boj2042/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, 구현, python3, 백준, 트리, 세그먼트 트리, 재귀", "date": "2021-06-04 12:00:00 +0900", "snippet": "문제소개문제출처 : 백준 - 구간 합 구하기풀이접근 과정가장 먼저 시도했던 방법은 적분의 개념을 이용하는 것이다. 원소의 개수 N개에 해당하는 배열S를 하나 만들어두고, 입력받은 배열이 arr라면 다음과 같이 정보가 저장된다. 참고로, arr는 순서와 인덱스가 다르게 되어있다. 1번째 원소는 arr[1]에 저장된다. S[1] = arr[1] 에 해당하는 값이 들어간다. S[2] = arr[2] + arr[1] 에 해당하는 값이 들어간다. 즉 S안의 인덱스가 몇번째 원소 까지의 합인지를 나타내는 것이다. S[10] = a..." }, { "title": "스프링 mvc 프로젝트 + AWS EC2에 빌드까지(4)", "url": "/posts/mvcproject4/", "categories": "Spring, spring_project", "tags": "spring, spring mvc, springboot, springframework, java", "date": "2021-06-04 11:00:00 +0900", "snippet": "이전 글이전글 에서는 Post 엔티티를 정의하고 이를 등록, 수정, 삭제하는 과정을 진행하였다. 이번 시간에는 저번 시간에 이어 부족한 부분들을 채워보고, 테스트를 진행한뒤, Reply엔티티까지 만들어 보겠다.Account 정보 수정관련 추가이전 닉네임을 변경할 때, ProfileFormValidator 라는 클래스의 validate (Overriding)메서드를 이용하였다. 하지만 여기서 문제가 발생하는데, 쓰던 닉네임을 그대로 입력했을 때에도 중복체크가 되어 걸리는 것이다. 따라서 validate 메서드를 다음과 같이 수정..." }, { "title": "백준 14499 주사위 굴리기 with Python", "url": "/posts/boj14499/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, 구현, python3, 백준, 시뮬레이션", "date": "2021-06-03 12:00:00 +0900", "snippet": "문제소개문제출처 : 백준 - 주사위 굴리기풀이접근 과정예시 하나를 그려서 풀이를 생각하는 데에 시간이 조금 걸렸다. (공간 지각력이 그렇게 좋은편은 아니기에…) 하지만 예시 1개만 시뮬레이션 해본다면 규칙은 금방 파악할 수 있다. 필자의 경우는 전개도로 부터 힌트를 얻었다.커맨드가 4개있는데, 이들은 주사위의 상대적인 위치를 바꾼다. + 자 모양의 전개도가 있다고 하였을 때, 위와 아래쪽으로 가는 커맨드(4,3)는 세로축의 순서를 바꾸게 되고 왼쪽과 오른쪽으로 가는 커맨드(2,1)는 가로축의 순서를 바꾸고, 윗면또한 바꾸게 된..." }, { "title": "스프링 mvc 프로젝트 + AWS EC2에 빌드까지(3)", "url": "/posts/mvcproject3/", "categories": "Spring, spring_project", "tags": "spring, spring mvc, springboot, springframework, java", "date": "2021-06-03 11:00:00 +0900", "snippet": "이전 글이전글 에서는 Account와 관련된 기능들을 좀 더 다듬고, MockMvc를 이용해 테스트를 진행해 보았다. 이번 시간에는 Account의 정보 수정을 구현하고 Post라는 엔티티를 정의해보려한다.Account 정보 수정정보변경에 대한 기능은 프론트뷰에선 다음과 같이 위치해 있으며 클릭시 URI는 “/settings”에 해당한다.클릭하여 들어올 시, 뷰는 다음과 같이 구성된다.닉네임과 소개글, 프로필 이미지를 변경할 수 있다. 프로필 이미지 변경에 대한 프로그램은 Cropper를 이용하여 구현하였다.가장 먼저, “/s..." }, { "title": "백준 14500 테트로미노 with Python", "url": "/posts/boj14500/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, 구현, python3, 백준, 시뮬레이션, dfs, 브루트포스", "date": "2021-06-03 10:00:00 +0900", "snippet": "문제소개문제출처 : 백준 - 테트로미노풀이접근 과정가장 먼저 든 생각은, ‘가능한 형태를 모두 배열로 만들어두고 일일이 끼워넣어 마스킹하면 풀리겠구나’ 였다. 굳이 분류를 해보자면 브루트 포스 + 구현 방식에 속한다. 하지만 이를 코드로 옮겨보지는 않았고 다음과 같은 방법을 생각해 보았다.핵심은 4칸으로 만들수 있는 모든 도형 이라는 것이다. 실제 도형들을 보면 아래와 같다. 1자형(가로 / 세로 4칸) ㄱ자형(가로 1칸, 세로 3칸 / 가로 3칸 세로 1칸) ㄹ자형(가로, 세로 2칸), ㅁ자형(가로, 세로 2칸) ㅜ자..." }, { "title": "스프링 mvc 프로젝트 + AWS EC2에 빌드까지(2)", "url": "/posts/mvcporject2/", "categories": "Spring, spring_project", "tags": "spring, spring mvc, springboot, springframework, java", "date": "2021-06-02 11:00:00 +0900", "snippet": "이전 글이전글 에서는 Account 클래스를 만들고 이에 Spring Security를 적용하여 로그인과 회원가입을 진행해보았다. 이번시간에는 Account와 관련된 기능들을 좀 더 다듬고, MockMvc를 이용해 테스트를 진행해 보려한다.Account 다듬기회원가입 - 추가 1지난 시간, 회원가입에 추가하지 않은 로직이 존재한다. 바로 ‘같은 닉네임이나, 이메일이 이미 존재하는 경우 이를 못하게’끔 막아야 하는 것이다. 이는 기존 SignUpForm에서 준 제약조건으로 불가능하므로 Valiator를 이용해야한다.@PostMa..." }, { "title": "백준 2098 외판원 순회 with Python", "url": "/posts/boj2098/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, dp, 비트 마스크, python3, dfs, 백준, 다이나믹 프로그래밍", "date": "2021-06-01 22:00:00 +0900", "snippet": "문제소개문제출처 : 백준 - 외판원 순회풀이접근 과정할일 정하기 1의 문제와 상당히 유사하다. 어떤 도시를 거쳤느냐에 따라 다음 갈 도시에 영향을 주고, 이는 곧 비용을 다르게 하기에 모든 도시에서 출발하여 순회해보는 완전탐색을 필요로 한다. 위 문제와 다른점을 꼽자면 외판원 순회 문제는 순서가 생긴다는 것이다.하지만 이 과정에서 ‘경로의 중복’ 이 발생하므로 동일한 경로에 대해서는 dp 테이블에 저장해두고 값을 꺼내쓰면 된다. 그럼 dp 테이블에는 어떠한 값이 행과 열로 자리해야할까? 가장 먼저, 비트마스크를 사용하여 경로..." }, { "title": "스프링 mvc 프로젝트 + AWS EC2에 빌드까지(1)", "url": "/posts/mvcproject1/", "categories": "Spring, spring_project", "tags": "spring, spring mvc, springboot, springframework, java", "date": "2021-06-01 11:00:00 +0900", "snippet": "프로젝트 목표스프링 부트를 이용하여 간단한 게시판 페이지를 만들어 보려한다. 그리고 이를 AWS의 EC2를 이용하여 직접 라이브 서버에 띄워보는 것을 목표로 한다.초기 설정JDK 버전은 11에 해당하며, 스프링 부트의 버전은 2.4.7을 사용했다. 불러온 라이브러리들은 lombok, devtool, web, dataJpa 마지막으로 템플릿으로 사용할 thymeleaf 까지 가져오도록 하였다. 개발단계에서는 데이터베이스로 h2를 사용하고, 이를 실제로 띄울 때에는 MySQL이나 MariaDB를 사용할 예정이다.// build...." }, { "title": "백준 6198 옥상 정원 꾸미기 with Python", "url": "/posts/boj6198/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, 스택, python3, 백준, 자료구조", "date": "2021-05-29 10:00:00 +0900", "snippet": "문제소개문제출처 : 백준 - 옥상 정원 꾸미기풀이접근 과정프로그래머스 문제중 하나인 ‘주식 가격’문제와 굉장히 흡사하다. 문제를 읽어보면 어렵지 않게 ‘스택을 써야 겠다’라는 생각이 들것이다.스택을 사용하기로 하였으면, 데이터를 쌓는 와중에 처리를 해줘야 하는 이벤트는 무엇에 해당하는지 파악해야 한다. 이 문제에서 이벤트는 자신보다 같거나 높은 건물이 있을경우 에 해당한다. 즉, 스택을 이용해 데이터를 쌓아두다가, 스택 가장 위에 쌓인 값보다 큰 값이 들어오는 경우 처리가 필요하다. 예시를 통해 이해해보자. A = [10,3..." }, { "title": "백준 5430 AC with Python", "url": "/posts/boj5430/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, 문자열, python3, 백준, string", "date": "2021-05-28 19:00:00 +0900", "snippet": "문제소개문제출처 : 백준 - AC풀이접근 과정기능은 2가지(R,D)만 존재하고 둘다 단순하여 구현에는 크게 어려움이 없다. 하지만 테스트 케이스가 최대 100개에, 커맨드가 100,000개, 배열의 수 또한 100,000개 까지 주어진다. 즉 메모리를 그때 그때 수정하는 식으로 접근하게 되면 시간제한 1초와 메모리 제한 256MB 로 부터 자유로울 수 없다.만약 주어진 배열이 10만개의 원소를 가진 배열이라고 생각해 보자, 이 때 D연산의 경우 popleft()와 같지만 배열로 구현할 경우 \\(O(N)\\)의 시간 복잡도를 가진..." }, { "title": "백준 1796 신기한 키보드 with Python", "url": "/posts/boj1796/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, dp, python3, 백준, 브루트 포스, 다이나믹 프로그래밍", "date": "2021-05-28 11:00:00 +0900", "snippet": "문제소개문제출처 : 백준 - 신기한 키보드풀이접근 과정처음 문제 자체를 이해하는데 약간 시간이 걸렸다. 핵심은 알파벳마다 ‘같은 작업의 반복’을 하고 있으며 다음 작업에 영향을 준다는 것이다. a - a 를 모두 훑은 다음 b - b를 모두 훑어야 하는식이 그것이다. 따라서 이는 dp나 브루트포스 알고리즘으로 접근할 수 있다.그렇다면 dp 테이블을 어떻게 만들어야 하는지에 대해 생각을 해보아야 한다. 가장 쉽게 생각할 수 있는 것은 ‘알파벳에 대한 정보’ 가 있고, 두번째로 영향을 주는 것은 ‘커서의 위치’ 임을 파악하면 된다..." }, { "title": "백준 1311 할일 정하기1 with Python", "url": "/posts/boj1311/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, dp, 비트 마스크, python3, 백준, 다이나믹 프로그래밍", "date": "2021-05-26 22:00:00 +0900", "snippet": "문제소개문제출처 : 백준 - 할일 정하기 1풀이접근 과정 비트마스크에 대한 간단한 정보는 여기에 적어 두었다.만약 작업자와 일의 개수가 20개가 되었을 시, 나올 수 있는 조합은 \\(20!\\)에 해당한다. 다른 작업자의 일은 이전 작업자 들이 어떤일을 맡느냐에 따라 결과가 달라진다. 즉, ‘누가’ ‘어떤 일’을 맡느냐 를 나타내고 이를 기록해 두어야 하는데, 이를 모두 표시하기 위해서는 2의 20제곱 크기의 배열이 필요함을 생각할 수 있다. 이는 공간/시간적으로 굉장히 비효율적이다.앞 문단에서 작성한대로 구현을 하기 위해서..." }, { "title": "정렬 알고리즘 1 (bubble, selection, insertion) with Java&amp;Python", "url": "/posts/sorting/", "categories": "Algorithm, theory", "tags": "algorithm, theory, java, python3, 정렬", "date": "2021-05-25 22:00:00 +0900", "snippet": "버블 정렬 알고리즘가장 단순한 정렬방법으로, 핵심은 이웃한 두요소 의 대소 관계를 비교하고 교환한다는 것이다. 배열 A = [6,4,3,7,1,9,8]를 버블정렬 할 경우 다음과 같은 과정을 따른다.원리 6 4 3 7 1 9 8 맨 뒤에 원소인 9와 8의 비교부터 시작한다. 여기서 9가 8보다 크므로 교환한다. 6 4 3 7 1 8 9 다음 원소인 1과 8을 비교한다. 1 &amp;lt; 8 이므로 교환하지 않는다. 1 6 4 3 7 8 9 모두 한번씩..." }, { "title": "백준 11723 집합 with Python", "url": "/posts/set_bitmask/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, 집합, 비트 마스크, python3, 백준", "date": "2021-05-25 22:00:00 +0900", "snippet": "문제소개문제출처 : 백준 - 집합풀이접근 과정눈여겨 보아야 할 곳이 있는데 메모리에 엄청난 제한(4MB)을 두고 있다. 또한 연산의 수가 3,000,000개가 주어지게 되므로 이에 유의해야 한다. 커맨드 중에서 all이나 empty의 경우 계속해서 리스트를 생성해 초기화 시킬시 메모리 초과가 나기 쉽다.비트마스킹이를 메모리 초과 없이 해결하기 위해서는 ‘비트’단위로 자료를 다루는 비트마스크 테크닉이 필요하다. 이는 2진수(0,1)로 자료를 다루는데, 대표적인 예는 다음과 같다. 다음과 같은 집합이 있다고 가정하자 A={1,2..." }, { "title": "백준 10026 적록색약 with Python", "url": "/posts/color_weakness/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, dfs, bfs, 그래프, python3, 백준", "date": "2021-05-24 15:00:00 +0900", "snippet": "문제소개문제출처 : 백준 - 적록색약풀이접근 과정간단한 bfs / dfs 문제중 하나이다. 두가지를 구현을 해야하는데 적록색약이 아닌경우와 적록색약일 경우를 각각 bfs / dfs를 이용해 구현하면 된다.방문했는지의 여부를 나타내는 visited를 초기화 시켜놓고, 이중 for문으로 그래프 하나하나를 돌면서 미방문한 위치가 나올 시 dfs로 인접한 타일의 방문처리를 해주고, 이 때마다 카운트를 하나씩 더해주면 된다.여기서는 dfs로 구현해 보았다.구현 (python)import syssys.setrecursionlimit(in..." }, { "title": "백준 1759 암호 만들기 with Python", "url": "/posts/make_cipher/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, 조합, 브루트 포스, 백트래킹, python3, 백준", "date": "2021-05-24 10:00:00 +0900", "snippet": "문제소개문제출처 : 백준 - 암호 만들기풀이접근 과정조합을 이용한 문제이다. 하지만 다른 조합 문제와는 다르게 특별한 점이 있는데 바로 자음과 모음이 각각 1개와 2개 이상 필수적으로 들어가야 하는 것이다. 마치 조금 꼬아낸 경우의 수 문제와도 같다. 그리고 한가지 더, 오름차순으로 정렬해야 한다는 점이 존재한다.따라서 모음과 자음 조건을 종료조건에 추가해 주기만 하면 된다. 파이썬 표준 라이브러리인 itertools.combination을 이용해도 되지만, 여기서는 직접 브루트 포스로 조합을 구현해 진행했다.구현(python..." }, { "title": "백준 1987 알파벳 with Python", "url": "/posts/alphabet/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, bfs, dfs, python3, 백준, 백트래킹", "date": "2021-05-22 10:00:00 +0900", "snippet": "문제소개문제출처 : 백준 - 알파벳풀이접근 과정그래프에서의 길찾기 문제와 굉장히 유사하다. 가중치가 없는 간선에 대한 움직임에 해당하므로 dfs 혹은 bfs 를 이용하면 쉽게 해결할 수 있을 것이라고 생각했다.문제를 해결하려는 과정은 다음과 같았다. 참고로 dfs로 해결해 보려 했다. 가장 먼저 상하좌우로 움직이며 방문할 수 있는 곳을 체크한다. 그래프 범위를 넘어가거나 이미 방문한 알파벳이라면 무시한다. 2의 경우가 아니면 방문처리하고, 이 위치를 매개변수 삼아 다시 dfs를 호출한다. ..." }, { "title": "백준 14503 로봇 청소기 with Python (BOJ)", "url": "/posts/robot_cleaner/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, 구현, dfs, 시뮬레이션, python3, 백준, 삼성sw역량테스트", "date": "2021-05-22 10:00:00 +0900", "snippet": "문제 소개 - 로봇 청소기문제 출처 : 백준 - 로봇 청소기 삼성SW역량테스트 문제풀이접근 과정 논외로, 삼성 SW문제들의 공통점(?)이 몇개 있는것 같은데 정말 착실하게 문제 설명을 잘 구현만 하면 된다는 것이다. 번뜩이는 아이디어보다는 이러한 구현 능력을 정말 중요하게 여기는 것을 보여준다. (그리고 평균적으로 코드 량이 길어지는데 이는 내 구현 능력이 부족함을 뜻하는 것 같다..)문제를 읽고 가장먼저 dfs 로 풀어야 겠다라는 생각이 들었다. 문제에서 설명하는 로봇청소기 역시 이러한 원리를 이용해 움직이고 있었기에 이를..." }, { "title": "백준 2162 선분 그룹 with Python (BOJ)", "url": "/posts/segment_group/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, ccw, python3, union find, 선분교차, 백준", "date": "2021-05-21 22:20:00 +0900", "snippet": "문제 소개 - 선분 그룹문제출처 : 백준 - 선분 그룹풀이접근과정선분 교차에 대한 개념과 설명은 이전글 에서 많이 설명하였으므로 패스하겠다. 문제 푸는 과정은 간단하다. 이들이 서로 교차하는지(혹은 한점에서 만나는지)를 판단하고 이들을 같은 그룹으로 짝지어준다. 마지막으로 그룹의 수와 가장 큰 그룹에 선분 개수를 출력하면 된다.여기서 ‘같은 그룹’으로 짝지어 준다는 것은 합집합을 진행하겠다는 의미이고, 이는 ‘유니온 파인드’를 이용하여 진행할 수 있다.구현(python)파이썬으로 구현한 코드는 다음과 같다.import sysf..." }, { "title": "백준 11758, 17386~7, 20149 CCW, 선분교차 관련문제 with Python", "url": "/posts/ccw/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, ccw, python3, 선분교차, 백준", "date": "2021-05-21 22:20:00 +0900", "snippet": "문제소개 - CCW문제 출처 : 백준 - CCW풀이접근과정이 문제의 경우는 CCW 알고리즘을 이용해야 하는데(아예 노골적으로 이를 물어보는 문제이다..), CCW 알고리즘의 경우에는 매우 범용성이 뛰어나고 기하 부분에서는 중요한 알고리즘이므로 이론을 먼저 설명하고 가겠다. 일단 두개의 벡터가 필요한데, 이를 위해서는 세 점을 먼저 다음과 같이 놓을 수 있다.A의 좌표를 [x1,y1] B를 [x2,y2] C를 [x3,y3] 이라고 하자. 여기서 이들을 이은 선분 A-B B-C는 반시계 방향을 띄고있다. 이를 체크 해야 하는 것이..." }, { "title": "백준 2166 다각형의 면적 with Python (BOJ)", "url": "/posts/polygon_area/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, 다각형의 면적, python3, 백준", "date": "2021-05-21 22:00:00 +0900", "snippet": "문제 소개문제 출처 : 백준 - 다각형의 면적풀이접근 과정대학 수학이나, 공업 수학에서 배우는 그린정리의 특수한 형태라고 볼 수 있다. 2차원에서 좌표 값이 주어질 때(N각형이며, 오목 볼록과는 상관 없이 사용할 수 있다.) 다각형의 면적을 구하는 방법으로 ‘신발끈 정리’ 라고도 불린다. 원리는 정말 간단하다. 단순히 말하면. 각각 모서리 마다 원점(0,0)을 기준으로 하는 삼각형의 넓이를 계산하여, 평행 사변형의 넓이와 같은 벡터곱(cross product)들을 모두 합쳐 2로 나누면 끝이다. 만약 원점 기준으로 모서리들이 ..." }, { "title": "문자열 알고리즘(Brute Force, KMP, Boyer-Moore) with Java &amp; Python", "url": "/posts/string/", "categories": "Algorithm, theory", "tags": "algorithm, kmp, string, theory, java, boyer-moore, python3", "date": "2021-05-19 22:46:00 +0900", "snippet": "Brute-Force 알고리즘문자열을 검색하는 데에, 가장 기초적인 알고리즘에 속한다. 주어진 문자열과 찾고 싶은 문자열이 있을 때, 이를 하나 하나 대조해가며 확인하는 방식이다.찾고자 하는 문자열의 길이를 M, 주어진 문자열 원본의 길이가 N이라고 할 때 최악의 상황에서 시간 복잡도는 O(NM) 에 달한다. 검색할 문자열을 패턴(pattern)이라고 하고, 문자열 원본을 텍스트(text)라고 하겠다.원리동작원리는 다음과 같다. 텍스트가 ‘ABCDEFGH’라고 하고, pattern이 ‘DE’일때이다.A B C D E F G ..." }, { "title": "백준 4803 트리 with Python", "url": "/posts/boj4803/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, 트리, python3, graph, dfs, bfs, 백준", "date": "2021-05-12 10:00:00 +0900", "snippet": "문제소개 - 트리문제 출처 : 백준 - 트리풀이접근과정주어진 간선정보로부터 트리가 몇개 있는지 뽑아내는 문제에 해당한다. 이는 곧 트리의 정의와도 연관된다. 즉, 사이클이 없으면서, 노드가 n개 일때 간선은 n-1개 여야한다. 이를 조건 1, 2라고 하겠다.여기서는 조건 1만 따져도 된다. 입력 조건에서 같은 간선이 여러번 주어지지 않는다고 하였으므로 조건2를 초과하는 개수의 간선이 입력될 경우 트리엔 자연스럽게 사이클이 생성된다.다음은 트리가 3개인 상황이다. 루트노드만 존재하는 경우에도 트리가 된다.그럼 이제 직접 문제상..." }, { "title": "자바(JVM)의 구동 원리 및 구조 - 4", "url": "/posts/java_intro_4/", "categories": "Java, java_study", "tags": "java, jvm, 자바", "date": "2021-05-11 17:00:00 +0900", "snippet": "이전 포스트 - 자바(JVM)의 구동 원리 및 구조 - 1이전 포스트 - 자바(JVM)의 구동 원리 및 구조 - 2이전 포스트 - 자바(JVM)의 구동 원리 및 구조 - 3저번 시간에는 GC에 있어 여러가지 참조 형태와 사용자 코드의 개입에 대해서 이야기 해보았는데, 마지막으로 GC의 여러 알고리즘을 이야기하고자 한다.GC과정에서 가장 큰 이슈는 크게 2가지가 존재한다. 일시 정지 시간(Stop the world) ‘멈춤시간’의 최소화 동일시간에 처리량을 최대화 하는 것여러가지 GC 방식들Serial GCCPU의 코어가 1..." }, { "title": "백준 5639 이진 검색 트리 with Python", "url": "/posts/boj5639/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, 트리, python3, graph, dfs, bfs, 백준", "date": "2021-05-11 10:00:00 +0900", "snippet": "문제소개 - 트리의 순회문제 출처 : 백준 - 이진 검색 트리풀이접근과정앞선문제와 굉장히 유사하다. 하지만 여기서는 트리가 ‘값’이 있는 이진 검색트리에 해당한다.이전 문제와 마찬가지로 pre_order의 정보만을 가지고 post_order를 뽑아내야 한다. 이전 문제보단 훨씬 간단해 진 것이, 참조하는 배열이 하나 뿐인것이다. 따라서 이에 대한 참조 시작지점과 참조 끝지점만 신경쓰면 된다(argument 가 2개)예시로 준 트리를 가지고 탐색을 시작해보자.pre - order : &#39;50&#39; 30 24 5 28 4..." }, { "title": "자바(JVM)의 구동 원리 및 구조 - 3", "url": "/posts/java_intro_3/", "categories": "Java, java_study", "tags": "java, jvm, 자바", "date": "2021-05-10 17:00:00 +0900", "snippet": "이전 포스트 - 자바(JVM)의 구동 원리 및 구조 - 1이전 포스트 - 자바(JVM)의 구동 원리 및 구조 - 2JVM의 구조와 그 중 Garbage Collector의 역할에 대해서 알아보았다. 이번 포스트부터는 심화적인 내용에 들어갈 예정인데, 가장 첫번째로 ‘참조(Reference)’에 대해서 알아보려 한다.레퍼런스1편에 있었던 예시를 가져와서 레퍼런스가 무엇이었는가에 대한 기억을 살려보아야한다.public class Main{ public static void main(String[] args){ ..." }, { "title": "자바(JVM)의 구동 원리 및 구조 - 2", "url": "/posts/java_intro_2/", "categories": "Java, java_study", "tags": "java, jvm, 자바", "date": "2021-05-10 15:00:00 +0900", "snippet": "이전 포스트 - 자바(JVM)의 구동 원리 및 구조 - 1저번 시간에는 자바의 전체적인 틀과함께 JVM의 구조를 알아보았다. 그 중에서 JVM의 메모리에 해당하는 Runtime Data Area 영역에 대해서 자세히 알아보았고 그중에서도 Stack과 Heap영역에 데이터가 쌓이는 방식에 대해 알아보았다. 이번시간에는 JVM의 Garbage Collector의 동작 원리를 알아보려한다.Garbage Collection앞선 1편에서 보았던 마지막 예시에 해당한다. 오른쪽 힙의 Integer 10이라는 데이터는 스택으로부터 아무런 ..." }, { "title": "자바(JVM)의 구동 원리 및 구조 - 1", "url": "/posts/java_intro_1/", "categories": "Java, java_study", "tags": "java, jvm, 자바", "date": "2021-05-10 11:00:00 +0900", "snippet": "JAVA의 전체적인 틀동작원리를 알기 전에, 먼저 자바의 파일들이 어떻게 구성되어있는지 알 필요가 있다. Intellij나 Eclipse 등을 이용해 Java언어 코딩을 진행할때 많이 보았을 파일의 형식은 아마 .java였을 것이다. 그리고 컴파일을 하게 되면 out 폴더나(Intellij), bulid 폴더(eclipse)내에 동일한 이름의 .class 파일이 존재하는 것도 보았을 수 있다.전자의 경우는 우리가 직접 코딩을 할수 있도록 하는, 즉 사람이 직접 작업하거나 읽기 쉽도록 쓰여진 문서에 해당하고 후자는(아마 익스텐션..." }, { "title": "백준 2263 트리의 순회 with Python", "url": "/posts/boj2263/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, 트리, python3, graph, dfs, bfs, 백준", "date": "2021-05-10 10:20:00 +0900", "snippet": "문제소개 - 트리의 순회문제 출처 : 백준 - 트리의 순회풀이접근과정이진 트리의 in-order 순회 정보와 post-order 순회 정보를 가지고 pre-order를 구하는 방법이다. 가장 처음에는 in-order, post-order 정보로 트리를 직접 구해보려 했지만 이는 문제에서 물어보는 방향과 조금 다름을 깨달았다.그렇다면 in-order, post-order로 부터 어떠한 정보를 얻어낼 수 있는지 다음의 예시를 보자.위 트리의 in, post order는 다음과 같다. in-order : 4 -&amp;gt; 2-..." }, { "title": "백준 1167 트리의 지름 with Python, Java", "url": "/posts/boj1167/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, 트리, python3, graph, dfs, bfs, 백준, java", "date": "2021-05-01 10:20:00 +0900", "snippet": "문제소개 - 트리의 지름문제 출처 : 백준 - 트리의 지름풀이접근과정어느 노드건 루트가 될 수 있고 사이클이 없다는 트리의 특성을 이용한 문제에 해당한다. 이 문제를 처음 만났을 때 가장 막혔던 부분은 ‘무엇을 기준점으로 삼지?’ 에 대한 것이었다.무엇을 기준점으로 삼느냐에 대한 해답은 금방 찾을 수 있었다. 예제입력 1을 예로들어 설명해 보겠다.여기서의 지름은 비용 2-3-6으로 이루어진 루트에 해당한다. (노드 1부터 5까지) 이러한 그래프가 주어졌을 때 우리는 완전탐색 (bfs or dfs)를 이용하면 어떤 노드부터 다른..." }, { "title": "백준 11725 트리의 부모 찾기 with Python, Java", "url": "/posts/boj11725/", "categories": "Algorithm, problem", "tags": "algorithm, boj, problem, 트리, python3, graph, dfs, bfs, 백준, java", "date": "2021-04-30 10:20:00 +0900", "snippet": "문제소개 - 트리의 부모찾기문제 출처 : 백준 - 트리의 부모 찾기풀이접근과정가장 먼저 트리를 입력받는 과정이 주어지는데, 트리는 양방향 그래프에 해당하기에 서로의 그래프에 매핑을 시켜주어야 한다. 추가적으로 이 문제에서는 루트가 주어졌기에 ‘방향성’을 잡을 수 있었다. 하지만 루트가 주어지지 않더라도 사실 트리는 어떠한 노드던 간에 루트가 될 수 있기에 크게 상관이 없다.루트가 1로 주어졌으므로 이를 기준을 삼아 깊이 우선탐색을 하여 부모를 갱신해주면 된다. 파이썬의 경우 Tree를 구현하기 위해서는 class를 사용해 객..." } ]
