<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://vitriol95.github.io/</id><title>Vitriol</title><subtitle>기억을 적는 시간</subtitle> <updated>2022-01-02T15:01:42+09:00</updated> <author> <name>vitriol</name> <uri>https://vitriol95.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://vitriol95.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko" href="https://vitriol95.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2022 vitriol </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>스프링 배치 - 10 faultTolerant</title><link href="https://vitriol95.github.io/posts/batchbase10/" rel="alternate" type="text/html" title="스프링 배치 - 10 faultTolerant" /><published>2021-11-07T13:00:00+09:00</published> <updated>2022-01-02T15:01:10+09:00</updated> <id>https://vitriol95.github.io/posts/batchbase10/</id> <content src="https://vitriol95.github.io/posts/batchbase10/" /> <author> <name>vitriol</name> </author> <category term="Spring" /> <category term="batch" /> <summary> FaultTolerant 큰 의미로 이번 기능또한 마찬가지로 배치 반복 및 오류제어 카테고리에 들어간다. 해당 옵션또한 여러 청크지향 프로세스에 자주등장하며, 장애 처리에 대해 복원력을 향상시킬 수 있는 방법이다. 단어 그대로, fault에 대해 tolerant하게 버틴다는것이다. 즉, 해당 기능을 이용하면 오류가 발생해도 Step이 즉시 종료되지 않고 Retry나 Skip기능을 활성화 함으로서 내결함성의 서비스가 가능하도록 한다. 기본 개념 @Bean public Step step(){ return stepBuilderFactory.get("myStep") .&amp;lt;String,String&amp;gt;chunk(10) .reader(myReader())... </summary> </entry> <entry><title>스프링 배치 - 9 배치 반복 및 오류제어 두번째</title><link href="https://vitriol95.github.io/posts/batchbase9/" rel="alternate" type="text/html" title="스프링 배치 - 9 배치 반복 및 오류제어 두번째" /><published>2021-11-07T13:00:00+09:00</published> <updated>2022-01-02T15:01:10+09:00</updated> <id>https://vitriol95.github.io/posts/batchbase9/</id> <content src="https://vitriol95.github.io/posts/batchbase9/" /> <author> <name>vitriol</name> </author> <category term="Spring" /> <category term="batch" /> <summary> 첫번째에선 배치 반복 및 오류제어 글을 쓰다보니 너무 길어져 한번 짜르고 이어가도록 하겠다. 앞선 포스트에서는 배치 반복 및 오류제어와 관련된 이야기를 이해하기 위해 큰 흐름을 뒤짚어 보았을 뿐이다. 요약하자면 청크기반이 아닌 스텝은 RepeatOperation인 stepOperation을 가지고있고, 청크기반인 스텝은 RepeatOperation stepOperation을 똑같이 가지지만 청크 단위의 chunkOperation도 가지고있다는 것이다. 그리고 CompletionPolicy의 존재또한 확인했다. 스텝에서의 반복 청크기반이든 아니든 우리가 스텝의 실행제어를 할 수 있는 방법들이 몇가지 존재한다. TaskletStepBuilder나, 청크기반인 SimpleStepBuilde... </summary> </entry> <entry><title>스프링 배치 - 8 배치 반복 및 오류제어 첫번째</title><link href="https://vitriol95.github.io/posts/batchbase8/" rel="alternate" type="text/html" title="스프링 배치 - 8 배치 반복 및 오류제어 첫번째" /><published>2021-11-07T13:00:00+09:00</published> <updated>2022-01-02T15:01:10+09:00</updated> <id>https://vitriol95.github.io/posts/batchbase8/</id> <content src="https://vitriol95.github.io/posts/batchbase8/" /> <author> <name>vitriol</name> </author> <category term="Spring" /> <category term="batch" /> <summary> Repeat 스프링 배치는 얼마나 작업을 반복해야 하는지 알려줄 수 있는 기능을 제공한다. 특정 조건이 충족되거나, 아닐경우에 Job, Step을 반복하도록 구성할 수 있다는 것이다. Step과 Chunk의 반복을 RepeatOperation을 통해서 처리하고 있기에 가능한 것이다. 이의 기본 구현체는 RepeatTemplate에 해당한다. 반복을 결정하는 요소들 RepeatStatus 보통 스프링 배치의 처리가 완료되었는지, 아닌지를 판별하기 위해 RepeatStatus라는 이넘클래스를 사용한다. 우리도 자주 사용했었다! 아래와 같은 simple한 구조의 잡이 있다고 하자. @Configuration @RequiredArgsConstructor public class JobIn... </summary> </entry> <entry><title>스프링 배치 - 7 ItemWriter</title><link href="https://vitriol95.github.io/posts/batchbase7/" rel="alternate" type="text/html" title="스프링 배치 - 7 ItemWriter" /><published>2021-11-07T12:00:00+09:00</published> <updated>2022-01-02T15:01:10+09:00</updated> <id>https://vitriol95.github.io/posts/batchbase7/</id> <content src="https://vitriol95.github.io/posts/batchbase7/" /> <author> <name>vitriol</name> </author> <category term="Spring" /> <category term="batch" /> <summary> ItemWriter 지난시간에 포스팅했던 ItemReader와 더불어 청크 지향 프로세스에 필수적인 ItemWriter에 대해 이야기할 예정이다. 기본 개념 청크 지향 프로세스의 최종단계로, processor 혹은 reader로 부터 받은 자료들을 Chunk단위로 받아 일괄 출력 작업을 위한 인터페이스에 속한다. ItemReader와 동일한 자료형들을 모두 지원한다. 가지고있는 메서드는 다음 하나뿐이다. 따라서 람다식을 활용해 넘겨줄 수 있다. void write(List&amp;lt;? extends T&amp;gt; items) 당연히 Stream이 필요하며 다수의 구현체들이 Writer와 함께 구현되어있다. 이들중 DataBase와 관련된 ItemWriter들을 알아볼 것이다. JdbcB... </summary> </entry> <entry><title>스프링 배치 - 6 ItemReader</title><link href="https://vitriol95.github.io/posts/batchbase6/" rel="alternate" type="text/html" title="스프링 배치 - 6 ItemReader" /><published>2021-11-06T12:00:00+09:00</published> <updated>2022-01-02T15:01:10+09:00</updated> <id>https://vitriol95.github.io/posts/batchbase6/</id> <content src="https://vitriol95.github.io/posts/batchbase6/" /> <author> <name>vitriol</name> </author> <category term="Spring" /> <category term="batch" /> <summary> ItemReader 이전시간에 청크 지향방식 태스크에 대해 이야기를 해보았는데, 총 3가지 과정으로 나누어지는 것을 확인했다. 이번엔 이중 Reader에 대해 좀 더 들어가보자. 기본 개념 다양한 입력으로부터 데이터를 읽어 제공하는 인터페이스에 해당한다. 지원하는 종류는 다음과 같다. FlatFile (csv,txt) XML, JSON DataBase JMS, RabbitMQ 같은 MQ Custom Reader 일종의 큰 맥락을 보면 아래 그림과 같이 정리된다. 굉장히 방대하고 양도 많다.. 여기서 ItemReader&amp;lt;T&amp;gt;는 read()메서드 하나를 가지고있으며 ItemStream 인터페이스는 스트림을 열고 닫으며 업데이트하는 핸들러들을 제공한다. 다... </summary> </entry> </feed>
